//
// Created by yyhu on 4/12/19.
//

#ifndef STEREO_UTILS_PLY_HPP
#define STEREO_UTILS_PLY_HPP

#include <fstream>
#include <iostream>
#include <string>
#include <vector>

#include "tinyply.h"

/** Write a PLY file.
 *
 * Wirte a PLY file from a disparity map.
 *
 * The disparity map is stored in disp with type DT. The height and width of the
 * disparity map is h and w. The values are laid out in row-major.
 *
 * The reprojection matrix is stored in q with type QT. No mater what QT is,
 * inside this funcion, the reprojection matrix will be converted to type float.
 * Reprojection matrix is also row-major and should always be 4x4 in size.
 *
 * The type of the coordinate values of the vertices in the result point cloud is float32.
 *
 * @tparam DT The type of the disparity map.
 * @tparam QT The type of the reprojection matrix.
 * @param fn The output filename.
 * @param disp The disparity map.
 * @param h Height of the disparity map.
 * @param w Width of the disparity map.
 * @param q Reprojection matrix.
 * @param binary Set to true if writing a binary PLY file.
 */
template<typename DT, typename QT>
void write_ply(const std::string& fn, const DT* disp, size_t h, size_t w, const QT* q, bool binary = false)
{
    // Create a buffer.
    std::filebuf binBuffer;
    if ( true == binary )
    {
        binBuffer.open( fn, std::ios::out | std::ios::binary );
    }
    else
    {
        binBuffer.open( fn, std::ios::out );
    }

    // Create the ostream.
    std::ostream ofs(&binBuffer);
    if ( ofs.fail() )
    {
        throw std::runtime_error("Fail to open " + fn + " for output.");
    }

    // Create the PlyFile object.
    tinyply::PlyFile plyFile;

    // ========================
    // NOT FINISHED.
    // ========================

    // Test data.
    struct float3 { float x, y, z; };
    std::vector<float3> sampleVertices{{1.0, 1.0, 1.0}, {2.0, 2.0, 2.0}};

    plyFile.add_properties_to_element("vertex", { "x", "y", "z" },
                                      tinyply::Type::FLOAT32,
                                      sampleVertices.size(),
                                      reinterpret_cast<uint8_t*>(sampleVertices.data()),
                                      tinyply::Type::INVALID, 0);

    plyFile.get_comments().push_back("generated by tinyply 2.2");

    plyFile.write( ofs, binary );
}

#endif //STEREO_UTILS_PLY_HPP
